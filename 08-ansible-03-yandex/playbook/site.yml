---
- name: Install Clickhouse
  hosts: clickhouse
  gather_facts: true
  tags: "clickhouse"

  handlers:
    - name: Start clickhouse service
      become: true
      ansible.builtin.service:
        name: clickhouse-server
        state: restarted

  tasks:

    - name: Get clickhouse distrib
      ansible.builtin.get_url:
        url: "https://packages.clickhouse.com/rpm/stable/{{ item }}-{{ clickhouse_version }}.{{ ansible_architecture }}.rpm"
        dest: "./{{ item }}-{{ clickhouse_version }}.rpm"
      with_items: "{{ clickhouse_packages }}"

    - name: Install clickhouse packages
      become: true
      ansible.builtin.yum:
        name:
          - clickhouse-common-static-{{ clickhouse_version }}.rpm
          - clickhouse-client-{{ clickhouse_version }}.rpm
          - clickhouse-server-{{ clickhouse_version }}.rpm
        disable_gpg_check: true
      notify: Start clickhouse service

    - name: Copy lighthouse config
      become: true
      ansible.builtin.copy:
        src: ./config/lh.xml
        dest: /etc/clickhouse-server/config.d/
      notify: Start clickhouse service

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Create database
      ansible.builtin.command: "clickhouse-client -q 'create database logs;'"
      register: create_db
      failed_when: create_db.rc != 0 and create_db.rc != 82
      changed_when: create_db.rc == 0

- name: Install Vector
  hosts: vector
  gather_facts: true
  tags: "vector"

  handlers:
    - name: Start vector service
      become: true
      ansible.builtin.service:
        name: vector
        state: restarted

  tasks:

    - name: Download Vector archive
      ansible.builtin.get_url:
        url: "https://packages.timber.io/vector/{{ vector_version_major }}/vector-{{ ansible_architecture }}-unknown-linux-musl.tar.gz"
        dest: "./vector-{{ ansible_architecture }}-unknown-linux-musl.tar.gz"

    - name: Ensure group 'vector' exists
      become: true
      ansible.builtin.group:
        name: vector

    - name: Add the user 'vector'
      become: true
      ansible.builtin.user:
        name: vector
        group: vector

    - name: Create the app directory for Vector
      become: true
      ansible.builtin.file:
        path: /opt/vector
        state: directory
        owner: vector
        group: vector

    - name: Create the data directory for Vector
      become: true
      ansible.builtin.file:
        path: /var/lib/vector
        state: directory
        owner: vector
        group: vector

    - name: Create the config directory for Vector
      become: true
      ansible.builtin.file:
        path: /etc/vector
        state: directory
        owner: vector
        group: vector

    - name: Extract vector
      become: true
      ansible.builtin.unarchive:
        src: "/home/wp/vector-{{ ansible_architecture }}-unknown-linux-musl.tar.gz"
        dest: /opt/vector
        remote_src: true
        extra_opts: [--strip-components=2]
        owner: vector
        group: vector

    - name: Template a file to /etc/vector/vector.toml
      become: true
      ansible.builtin.template:
        src: ./template/vector.toml
        dest: /etc/vector/vector.toml
        owner: root
        group: vector
        mode: '0644'
      notify: Start vector service

    - name: Copy vector executable file to /usr/bin
      become: true
      ansible.builtin.copy:
        src: /opt/vector/bin/vector
        dest: /usr/bin
        remote_src: true
        mode: preserve

    - name: Copy systemd service
      become: true
      ansible.builtin.copy:
        src: /opt/vector/etc/systemd/vector.service
        dest: /etc/systemd/system
        remote_src: true
        mode: preserve

- name: Install Lighthouse
  become: true # повысить привилегии для всех задач
  hosts: lighthouse # по всем хостам группы lighthouse
  gather_facts: true # собирать факты
  tags: "lighthouse" # тег для маркировки задач хостов lighthouse

  pre_tasks: # вспомогательные задачи

    - name: Install nginx # установка nginx
      ansible.builtin.yum:
        name: nginx # имя пакета из репозитория
        state: present # обеспечить присутствие пакета

    - name: Copy custom nginx.conf # применение конфига nginx.conf
      ansible.builtin.template:
        src: ./template/nginx.conf.j2 # локальный путь до шаблона
        dest: /etc/nginx/nginx.conf # удаленный путь на целевой машине
      notify: Restart nginx

    - name: Set up nginx config directory # создание директорий sites-available и sites-enabled
      ansible.builtin.file:
        path: /etc/nginx/{{ item }} # создавать директории в /etc/nginx
        state: directory # директории
      with_items: # цикл по указанным ниже директориям
        - sites-available
        - sites-enabled

    - name: Copy nginx lighthouse.conf # применить шаблон конфига для расположения (site) nginx
      ansible.builtin.template:
        src: ./template/lighthouse.conf.j2 # локальный путь до шаблона
        dest: /etc/nginx/sites-available/{{ domain }} # удаленный путь
        owner: '{{ nginx_user }}' # владелец файла конфига
        group: '{{ nginx_user }}' # группа файла конфига
        mode: 0644 # права доступа
      notify: Restart nginx

    - name: Activate the lighthouse nginx site # добавление симлинка на расположение сайта
      ansible.builtin.file:
        src: /etc/nginx/sites-available/{{ domain }} # источник для симлинка
        dest: /etc/nginx/sites-enabled/{{ domain }} # имя симлинка
        state: link # обеспечить присутствие линка

    - name: Install git # установка git
      ansible.builtin.yum:
        name: git # имя пакета
        state: present # обеспечить присутствие пакета

  handlers: # обработчики
    - name: Restart nginx # перезапуск сервиса nginx
      ansible.builtin.service:
        name: nginx # имя сервиса
        state: restarted # требовать перезапуска

  tasks: # основные задачи

    - name: Create www directory # создание директории расположения сайта /var/www/mydomain.com
      ansible.builtin.file:
        path: /var/www/{{ domain }} # путь создаваемой директории
        state: directory # что директория
        mode: 0775 # права доступа

    - name: Set SELinux context # добавление контекста SELinux для /var/www
      community.general.sefcontext:
        target: '/var/www/(/.*)?' # шаблон контекста
        setype: httpd_sys_content_t # тип контекста
        state: present # обеспечить присутствие контекста

    - name: Clone lighthouse # клонирование репозитория lighthouse
      ansible.builtin.git:
        repo: 'https://github.com/VKCOM/lighthouse.git' # репозиторий
        dest: /var/www/{{ domain }} # путь для клонирования
        version: master # ветка
        update: false # не обновлять

    - name: Set the permissions to all www files and directories # установка владельца и разрешений 755 на директории и 644 на файлы размещения /var/www
      ansible.builtin.file:
        path: /var/www # путь для установки разрешений
        recurse: true # рекурсивно
        owner: '{{ nginx_user }}' # пользователь nginx
        group: '{{ nginx_user }}' # группа nginx
        mode: u=rwX,g=rX,o=rX # права доступа

    - name: Apply SELinux file context to www # восстановление SELinux разрешений для /var/www
      ansible.builtin.command: restorecon -irv /var/www # команда восстановления
